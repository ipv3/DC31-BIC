ESSENTIAL GDB COMMANDS FOR ASSEMBLY; GOOD FOR C/C++

; Reminder To Assemble and Link 32-bit code in Linux with NASM:
;    nasm -g -f elf hello_asm.asm (add -g for debug -l pgm.lst )
;    ld -m elf_i386 hello_asm.o -o hello_asm

; Reminder to Compile a C program in Linux
;    gcc -g -o fooPgm.c  (add -g for debug )
;    use g++ to compile C++ program


Startup:
gdb <progname>
 gdb -help             print startup help, show switches
gdb object           normal debug 
gdb object core      core debug (must specify core file)
gdb object pid       attach to running process
gdb   

gdb Finds asm source code in same dir, I think
   (or is it from an assembler option??)
   

Exit:
q[uit] -or- q


<cr>   Repeat the last command


Commands can be abreviated down to point of uniqueness
   e.g. i r  -or-  i al (info registers,  info all-registers)
In this guide, optional letters of a cmd are placed in braces
   e.g. h[help] where we can use h, he, hel, or help for the cmd
Commands abbreviated to a single-letter are listed in Appendix A


https://visualgdb.com/gdbreference/commands/

https://www.sourceware.org/gdb/documentation/

https://sourceware.org/gdb/current/onlinedocs/gdb/




Help:
Type "help" followed by a class name for a list of commands in that class.
List of classes of commands:
aliases -- User-defined aliases of other commands.
breakpoints -- Making program stop at certain points.
data -- Examining data.
files -- Specifying and examining files.
internals -- Maintenance commands.
obscure -- Obscure features.
running -- Running the program.
stack -- Examining the stack.
status -- Status inquiries.
support -- Support facilities.
text-user-interface -- TUI is the GDB text based interface.
tracepoints -- Tracing of program execution without stopping the program.
user-defined -- User-defined commands.


h[elp] <keyword>   -or- h
help all	list of all commands.
apropos <word>	 	search for commands related to "word".
apropos -v <word>	full documentation of commands related to "word".


set print pretty

set disassembly-flavor intel   (default is att)


l[ist]  -or- l
list 1  -or-  l 1
l 5
l 15,20
l
l <function name>   e.g.  l _start
l -           list previous 10 lines
l *0x22e4      list source at address


r[un]  <args>
r foo hello 123


b[reak]  <addr>
break 1  -or-  b 1
b _start
break main       set a breakpoint on a function
b sub  (for a function named sub)
break 101        set a breakpoint on a line number
break basic.c:101        set breakpoint at file and line (or function)
i[nfo] b[reakpoints]        show breakpoints
d[elete] b[reakpoints] <num>   Delete specified breakpoint number
delete 1         delete a breakpoint by number
delete            delete all breakpoints (prompted)
clear             delete breakpoints at current line
clear function    delete breakpoints at function
clear line        delete breakpoints at line
disable 2         turn a breakpoint off, but don't remove it
enable 2          turn disabled breakpoint back on
tbreak function|line        set a temporary breakpoint
commands break-no ... end   set gdb commands with breakpoint
ignore break-no count       ignore bpt N-1 times before activation
condition break-no expression         break only if condition is true
condition 2 i == 20         example: break on breakpoint 2 if i equals 20
watch expression        set software watchpoint on variable
wa[tchpoint] var        Stops execution when var changes
info watchpoints        show current watchpoints


stepi  -or-  si
s[tep]   -or-  s
nexti  -or-  ni  (over functions)
n[ext]   -or-  n   (over functions)
c[ontinue]      continue program after stopping at breakpoint
step            single step the program; step into functions
step count       singlestep count times
next            step but step over functions 
next count       next count times
                Suggestion: The use of s/n/si/ni cmds become apparent
                in TUI mode when stepping thru C/C++ at the source
                C/C++ level vs Assembly level; especially when the
                pgm has OS function calls such as print


CTRL-C          actually SIGINT, stop execution of current program 


i[nfo]
i[nfo] r[egisters]  -or-  i r
info registers eax  -or-  i r eax
info all-registers  -or- i al       print registers incl floats
info locals             print all vars in local scope


p[rint] /format  expr
  prints decimal if not specified. expr is reg or var. prfx $
print $eax
p myVar
p (int) count1

x/<count>/<format> <address>
Examine contents of specified memory addr or curr addr
Count displays specified number of words
Address can be symbol (main) or numeric (0x10a44)
Same formats as for print command
x/100i foo   disassembles 100 instructions starting at foo
x/x &var                   print variable var in hex
x/countFormatSize address        low-level examine command
x/x &gx           print gx in hex
x/4wx &main       print 4 longs at start of \fImain\fR in hex
x/gf &gd1         print double
help x            show formats for x
print *this               print contents of this pointer
info line 22              print addresses for object code for line 22
info line *0x2c4e         print line number of object code at address
display/i $pc             print current instruction in display
x/10i main                disassemble first 10 instructions in main
x/i $pc              print curr instruction
disassemble addr          dissassemble code for function around addr


p[rint]
print [Expression]
print $[Previous value number]
print {[Type]}[Address]
print [First element]@[Element count]
print /[Format] [Expression]

Expression
    Specifies the expression that will be evaluated and printed. The expression can include references to variables (e.g. i), registers (e.g. $eax) and pseudo-registers (e.g. $pc). Note that if your expression refers to a local variable, you need to ensure that you have selected the correct frame. You can navigate frames using the up and down commands.
Previous value number
    When this format is used and i is specified as the previous value number, the print command will repeat the output produced by its i-th invocation.
Type/Address
    This format allows explicitly specifying the address of the evaluated expression and can be used as a shortcut to the C/C++ type conversion. E.g. *((int *)p) is equivalent to {int}p
First element/Element count
    This form allows interpreting the First element expression as an array of Element count sequential elements. The most common example of it is *argv@argc
Format
    If specified, allows overriding the output format used by the command. Valid format specifiers are:
    o - octal
    x - hexadecimal
    d - decimal
    u - unsigned decimal
    t - binary
    f - floating point
    a - address
    c - char
    s - string
    i - instruction
    

db) print argv[i]
$2 = 0xbffff204 "/home/bazis/test"
(gdb) print /a argv[i]
$3 = 0xbffff204
(gdb) print /s argv[i]
$4 = 0xbffff204 "/home/bazis/test"
(gdb) print /c argv[i]
$5 = 4 '\004'
(gdb) print *argv
$6 = 0xbffff204 "/home/bazis/test"
(gdb) print *argv@argc
$7 = {0xbffff204 "/home/bazis/test", 0xbffff215 "arg1", 0xbffff21a "arg2", 0xbffff21f "arg3"}
(gdb) print {void *}argv@argc
$8 = {0xbffff204, 0xbffff215, 0xbffff21a, 0xbffff21f}
(gdb) print $2
$9 = 0xbffff204 "/home/bazis/test"
(gdb) print argv[i]
$11 = 0xbffff215 "arg1"
(gdb) print /t argv[i]
$12 = 10111111111111111111001000010101


set var = expr     set register or memory location
   set $g4=0x456789AB    set myVar=myVar*2
Usage: set VAR = EXP
This uses assignment syntax appropriate for the current language
(VAR = EXP or VAR := EXP for example).
VAR may be a debugger "convenience" variable (names starting
with $), a register (a few standard names starting with $), or an actual
variable in the program being debugged.  EXP is any valid expression.
Use "set variable" for variables with names identical to set subcommands.

set variable, 
   set var -- Evaluate expression EXP and assign result to variable VAR.
p myVar = 5    ?????


j[ump]
jump <line no or *addr>
   Pgm will run until it hits a breakpoint or segfault
   You might want to set a breakpoint arr the jump destination


where    Show current activation stack


shell <optional OS cmd>
she[ll]


so[urce] file              load gdb commands from file


[py]thon    Evaluate a Python command.
    python print (23)
If no argument is given, the following lines are read and used
as the Python commands.  Type a line containing "end" to indicate
the end of the command.


Multi-screen, Window Mode::
     Note: Instead of an 80x24 terminal display, use a larger
           display such as 132x43. Can change after starting TUI mode

  Quick entry...
Ctrl-x  Ctrl-a                 Enter/exit TUI display
lay[out] next  -or- lay next   Enters or invokes next TUI display
                               Try cmd several times to cycle
                               through 5 displays
                               I like src, asm, cmd screen
ref[resh]  -or-  ref    Clean up screen overwrite Refresh terminal
Ctrl-x o     Toggle/cycle active window


Text User Interface commands
tui enable        -- Enable TUI display mode
tui disable       -- Disable TUI display mode

layout next  -- Apply the next TUI layout.
layout prev  -- Apply the previous TUI layout

layout regs  -- Apply TUI register layout
layout split -- Apply "split" layout
                This layout was created using:
                  tui new-layout split src 1 asm 1 status 0 cmd 1
layout src   -- Apply "src" layout
                This layout was created using:
                   tui new-layout src src 2 status 0 cmd 1
layout asm   -- Apply "asm" layout
                This layout was created using:
                  tui new-layout asm asm 2 status 0 cmd 1
                Note: If you prefer Intel disassembly mode more than
                ATT, set this before entering TUI mode.
                  (set disassembly-flavor intel)

tui new-layout    -- Create a new TUI layout       (advanced)
tui reg           -- Control the register window   (advanced)

show tui         -- display TUI configuration variables

TODO: Moving arr TUI mode ... ...





APPENDIX A
==========
Single-letter commands/abreviations:
   (Absent letters are either ambiguous or undefined in gdb.
    Some of these are intentional abreviation shortcuts where
    there are multiple cmds that begin with the single letter
    e.g. s (step) but there is shell, show, and others)

b breakpoint
c continue
d delete bookmark|breakpoints|checkpoint|display|mem|tracepoints|...
f frame
h help
i info
j jump
k kill
l list
n next
p print
q quit
r run
s step
t thread
u until
w with
x (examine)

